Parameters:
  VerticalName:
    Description: The name of the vertical
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"

  EnvironmentName:
    Description: The name of the target environment.
    Type: String
    AllowedValues: [dev, qa, prod]
    AllowedPattern: "[a-z0-9-]+"

  CidrPrefix:
    Type: String
    Description: The first two octets for the /16 VPC CIDR block

Mappings:
  Inventory:
    dev:
      CidrSuffix: 32.0/19
      PrivateSubnetA: 40.0/22
      PrivateSubnetB: 44.0/22
      PrivateSubnetC: 48.0/22
      PrivateSubnetD: 52.0/22
      PrivateSubnetE: 56.0/22
      PrivateSubnetF: 60.0/22
      PublicSubnetA: 32.0/24
      PublicSubnetB: 33.0/24
      PublicSubnetC: 34.0/24
      PublicSubnetD: 35.0/24
      PublicSubnetE: 36.0/24
      PublicSubnetF: 37.0/24

    qa:
      CidrSuffix: 64.0/19
      PrivateSubnetA: 72.0/22
      PrivateSubnetB: 76.0/22
      PrivateSubnetC: 80.0/22
      PrivateSubnetD: 84.0/22
      PrivateSubnetE: 88.0/22
      PrivateSubnetF: 92.0/22
      PublicSubnetA: 64.0/24
      PublicSubnetB: 65.0/24
      PublicSubnetC: 66.0/24
      PublicSubnetD: 67.0/24
      PublicSubnetE: 68.0/24
      PublicSubnetF: 69.0/24

    prod:
      CidrSuffix: 96.0/19
      PrivateSubnetA: 104.0/22
      PrivateSubnetB: 108.0/22
      PrivateSubnetC: 112.0/22
      PrivateSubnetD: 116.0/22
      PrivateSubnetE: 120.0/22
      PrivateSubnetF: 124.0/22
      PublicSubnetA: 96.0/24
      PublicSubnetB: 97.0/24
      PublicSubnetC: 98.0/24
      PublicSubnetD: 99.0/24
      PublicSubnetE: 100.0/24
      PublicSubnetF: 101.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join
        - "."
        - - !Ref CidrPrefix
          - !FindInMap [Inventory, !Ref EnvironmentName, CidrSuffix]
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Join
        - "."
        - - !Ref CidrPrefix
          - !FindInMap [Inventory, !Ref EnvironmentName, PublicSubnetA]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-${AWS::Region}a
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Join
        - "."
        - - !Ref CidrPrefix
          - !FindInMap [Inventory, !Ref EnvironmentName, PublicSubnetB]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-${AWS::Region}b
      MapPublicIpOnLaunch: true

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Join
        - "."
        - - !Ref CidrPrefix
          - !FindInMap [Inventory, !Ref EnvironmentName, PublicSubnetC]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-${AWS::Region}c
      MapPublicIpOnLaunch: true

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Join
        - "."
        - - !Ref CidrPrefix
          - !FindInMap [Inventory, !Ref EnvironmentName, PrivateSubnetA]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-priv-${AWS::Region}a

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Join
        - "."
        - - !Ref CidrPrefix
          - !FindInMap [Inventory, !Ref EnvironmentName, PrivateSubnetB]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-priv-${AWS::Region}b

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Join
        - "."
        - - !Ref CidrPrefix
          - !FindInMap [Inventory, !Ref EnvironmentName, PrivateSubnetC]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-priv-${AWS::Region}c

#  DHCP for routable domain names to ec2 instances

  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Join ["", [!Ref "AWS::Region", .compute.internal]]
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  DhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DhcpOptions

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

# NAT Gateway per AZ increases availability of the network.

  NatGatewayAttachmentA:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayAttachmentB:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayAttachmentC:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc

  # NAT gateways live in the public subnet
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachmentA.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-${AWS::Region}a
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachmentB.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-${AWS::Region}b
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachmentC.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-${AWS::Region}c

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-priv-${AWS::Region}a
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
  PrivateRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-priv-${AWS::Region}b
  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
  PrivateRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-priv-${AWS::Region}c
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
  PrivateRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC

Outputs:
  VPCId:
    Value: !Ref VPC

  VPCCidrBlock:
    Value: !GetAtt VPC.CidrBlock

  DefaultSecurityGroup:
    Description: The default security group in the VPC.
    Value: !GetAtt VPC.DefaultSecurityGroup

  PublicSubnets:
    Description: A list of the public subnets in the VPC.
    Value: !Sub ${PublicSubnetA},${PublicSubnetB},${PublicSubnetC}

  PrivateSubnets:
    Description: A list of the private subnets in the VPC.
    Value: !Sub ${PrivateSubnetA},${PrivateSubnetB},${PrivateSubnetC}

  NatGatewayIPs:
    Description: A list of the NAT gateway IPs
    Value: !Sub ${NatGatewayAttachmentA},${NatGatewayAttachmentB},${NatGatewayAttachmentC}

AWSTemplateFormatVersion: '2010-09-09'
Description: Simplified ECS cluster for Fargate tasks

Parameters:
  EnvironmentName:
    Description: The name of the target environment
    Type: String
    AllowedValues: [dev, qa, prod]

  VerticalName:
    Description: The name of the vertical that owns the cluster
    Type: String
    AllowedPattern: "[a-z]+"
    Default: ltk

  ClusterName:
    Description: The name of the ECS cluster
    Type: String

  InstanceType:
    Description: The type of the EC2 instances used to build the cluster
    Type: String
    Default: t3.micro

  MinSize:
    Description: The minimum number of EC2 instances allowed in the cluster
    Type: Number
    MinValue: 0
    Default: 1

  MaxSize:
    Description: The maximum number of EC2 instances allowed in the cluster
    Type: Number
    Default: 4

  DesiredCapacity:
    Description: The desired number of instances in the cluster
    Type: Number
    MinValue: -1
    Default: -1

  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Conditions:
  HasDesiredCapacity: !Not [!Equals [!Ref DesiredCapacity, -1]]

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-${VerticalName}-${ClusterName}
      CapacityProviders:
        - EC2
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Split
        - ","
        - Fn::ImportValue: !Sub ${EnvironmentName}:stacksets:v2:env:vpc:private-subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !If
        - HasDesiredCapacity
        - !Ref DesiredCapacity
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${VerticalName}-${ClusterName}
          PropagateAtLaunch: true
        - Key: Vertical
          Value: !Ref VerticalName
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - Fn::ImportValue: !Sub ${EnvironmentName}:stacksets:v2:env:vpc:default-security-group
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Installing aws-cfn-bootstrap ..."
          until yum install -y aws-cfn-bootstrap; do
            sleep 10
          done
          echo "Installed aws-cfn-bootstrap"
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                cat >> /etc/ecs/ecs.config << EOM
                ECS_CLUSTER=${Cluster}
                ECS_ENABLE_CONTAINER_METADATA=true
                EOM

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-${VerticalName}-${ClusterName}-ecs-cluster-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ClusterRole

Outputs:
  ClusterName:
    Description: A reference to the ECS cluster
    Value: !Ref Cluster

  ClusterArn:
    Description: The ECS cluster ARN
    Value: !GetAtt Cluster.Arn

  ECSSecurityGroup:
    Description: The security group used by ECS instances
    Value:
      Fn::ImportValue: !Sub ${EnvironmentName}:stacksets:v2:env:vpc:default-security-group
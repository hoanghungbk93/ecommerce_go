name: Deploy to AWS Dev Environment

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  ENV: dev

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
    
    - name: Run backend tests
      working-directory: ./backend
      run: go test -v ./...
    
    - name: Build backend
      working-directory: ./backend
      run: go build -v ./...

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get AWS Account ID
      id: get-account-id
      run: echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

    - name: Build backend Docker image
      working-directory: ./backend
      run: |
        docker build -t ecommerce-backend:${{ github.sha }} .
        docker tag ecommerce-backend:${{ github.sha }} ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/backend:${{ github.sha }}
        docker tag ecommerce-backend:${{ github.sha }} ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/backend:latest

    - name: Get backend URL for frontend build
      id: get-backend-url
      run: |
        BACKEND_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.ENV }}-ecommerce-app --query 'Stacks[0].Outputs[?OutputKey==`BackendUrl`].OutputValue' --output text 2>/dev/null || echo "")
        if [ -z "$BACKEND_URL" ]; then
          echo "⚠️  Backend URL not found, using placeholder"
          BACKEND_URL="http://localhost:8080"
        fi
        echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Build frontend Docker image
      working-directory: ./frontend
      run: |
        docker build --build-arg REACT_APP_API_URL="${{ steps.get-backend-url.outputs.backend_url }}/api/v1" -t ecommerce-frontend:${{ github.sha }} .
        docker tag ecommerce-frontend:${{ github.sha }} ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/frontend:${{ github.sha }}
        docker tag ecommerce-frontend:${{ github.sha }} ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/frontend:latest

    - name: Push backend image to ECR
      run: |
        docker push ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/backend:${{ github.sha }}
        docker push ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/backend:latest

    - name: Push frontend image to ECR
      run: |
        docker push ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/frontend:${{ github.sha }}
        docker push ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/frontend:latest

    - name: Update CloudFormation parameters with git SHA
      run: |
        sed -i 's/"latest"/"${{ github.sha }}"/g' cloudformation/app/${{ env.ENV }}.json

    - name: Deploy to AWS
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/app/template.yml \
          --stack-name ${{ env.ENV }}-ecommerce-app \
          --parameter-overrides file://cloudformation/app/${{ env.ENV }}.json \
          --capabilities CAPABILITY_NAMED_IAM \
          --region ${{ env.AWS_REGION }}

    - name: Update service to use new image
      run: |
        aws ecs update-service \
          --cluster ${{ env.ENV }}-ecommerce-cluster \
          --service ${{ env.ENV }}-ecommerce-backend \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        aws ecs update-service \
          --cluster ${{ env.ENV }}-ecommerce-cluster \
          --service ${{ env.ENV }}-ecommerce-frontend \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for deployment to complete
      run: |
        echo "⏳ Waiting for backend service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ENV }}-ecommerce-cluster \
          --services ${{ env.ENV }}-ecommerce-backend \
          --region ${{ env.AWS_REGION }}
        
        echo "⏳ Waiting for frontend service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ENV }}-ecommerce-cluster \
          --services ${{ env.ENV }}-ecommerce-frontend \
          --region ${{ env.AWS_REGION }}

    - name: Get deployment URLs
      id: get-urls
      run: |
        FRONTEND_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.ENV }}-ecommerce-app --query 'Stacks[0].Outputs[?OutputKey==`FrontendUrl`].OutputValue' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "Not found")
        BACKEND_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.ENV }}-ecommerce-app --query 'Stacks[0].Outputs[?OutputKey==`BackendUrl`].OutputValue' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "Not found")
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
        echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Health check
      run: |
        echo "🏥 Performing health checks..."
        
        if [ "${{ steps.get-urls.outputs.backend_url }}" != "Not found" ]; then
          echo "Testing backend: ${{ steps.get-urls.outputs.backend_url }}/health"
          for i in {1..5}; do
            if curl -f -s --max-time 10 "${{ steps.get-urls.outputs.backend_url }}/health" > /dev/null; then
              echo "✅ Backend health check passed"
              break
            else
              echo "⏳ Attempt $i: Backend not ready yet, waiting..."
              sleep 30
            fi
          done
        fi
        
        if [ "${{ steps.get-urls.outputs.frontend_url }}" != "Not found" ]; then
          echo "Testing frontend: ${{ steps.get-urls.outputs.frontend_url }}"
          for i in {1..3}; do
            if curl -f -s --max-time 10 "${{ steps.get-urls.outputs.frontend_url }}" > /dev/null; then
              echo "✅ Frontend health check passed"
              break
            else
              echo "⏳ Attempt $i: Frontend not ready yet, waiting..."
              sleep 20
            fi
          done
        fi

    - name: Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo ""
        echo "📱 Application URLs:"
        echo "   Frontend: ${{ steps.get-urls.outputs.frontend_url }}"
        echo "   Backend:  ${{ steps.get-urls.outputs.backend_url }}"
        echo ""
        echo "🐳 Docker Images:"
        echo "   Backend:  ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/backend:${{ github.sha }}"
        echo "   Frontend: ${{ steps.get-account-id.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ecommerce-app/frontend:${{ github.sha }}"
        echo ""
        echo "🏷️  Git SHA: ${{ github.sha }}"

# Service Infrastructure Management
# Simple commands to create, start, and stop your service infrastructure

# Configuration
SERVICE_NAME ?= ecommerce
ENVIRONMENT ?= dev
REGION ?= ap-southeast-1
STACK_NAME := $(ENVIRONMENT)-$(SERVICE_NAME)-infrastructure

# Template and parameter files
TEMPLATE_FILE := infrastructure-template.yml
PARAMS_FILE := $(SERVICE_NAME)-$(ENVIRONMENT)-params.json

# Colors for output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

.PHONY: help create start stop status logs delete validate update

# Default target
help:
	@echo "üöÄ $(SERVICE_NAME) Infrastructure Management"
	@echo "=========================================="
	@echo ""
	@echo "$(GREEN)Quick Commands:$(NC)"
	@echo "  make create SERVICE_NAME=myservice  - Create complete infrastructure"
	@echo "  make start                          - Start all services"
	@echo "  make stop                           - Stop all services"
	@echo "  make status                         - Show infrastructure status"
	@echo "  make logs                           - Show recent service logs"
	@echo "  make delete                         - Delete entire infrastructure"
	@echo ""
	@echo "$(YELLOW)Advanced Commands:$(NC)"
	@echo "  make validate                       - Validate CloudFormation template"
	@echo "  make update                         - Update existing infrastructure"
	@echo "  make events                         - Show CloudFormation events"
	@echo "  make outputs                        - Show stack outputs"
	@echo ""
	@echo "$(YELLOW)Environment Variables:$(NC)"
	@echo "  SERVICE_NAME=$(SERVICE_NAME)"
	@echo "  ENVIRONMENT=$(ENVIRONMENT)"
	@echo "  REGION=$(REGION)"
	@echo ""
	@echo "$(YELLOW)Examples:$(NC)"
	@echo "  make create SERVICE_NAME=blog ENVIRONMENT=prod"
	@echo "  make start"
	@echo "  make stop"

# Create complete infrastructure
create:
	@echo "$(GREEN)üèóÔ∏è  Creating $(SERVICE_NAME) infrastructure in $(ENVIRONMENT)...$(NC)"
	@echo "Stack: $(STACK_NAME)"
	@echo "Template: $(TEMPLATE_FILE)"
	@echo "Parameters: $(PARAMS_FILE)"
	@echo ""
	@if [ ! -f "$(PARAMS_FILE)" ]; then \
		echo "$(RED)‚ùå Parameter file $(PARAMS_FILE) not found!$(NC)"; \
		echo "Please create $(PARAMS_FILE) with your configuration."; \
		exit 1; \
	fi
	@aws cloudformation deploy \
		--template-file $(TEMPLATE_FILE) \
		--stack-name $(STACK_NAME) \
		--parameter-overrides file://$(PARAMS_FILE) \
		--capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
		--region $(REGION) \
		--no-fail-on-empty-changeset \
		--tags Environment=$(ENVIRONMENT) Service=$(SERVICE_NAME)
	@echo ""
	@echo "$(GREEN)‚úÖ Infrastructure created successfully!$(NC)"
	@make outputs

# Start all services (scale up)
start:
	@echo "$(GREEN)üöÄ Starting $(SERVICE_NAME) services...$(NC)"
	@CLUSTER_NAME=$$(aws cloudformation describe-stacks \
		--stack-name $(STACK_NAME) \
		--query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
		--output text --region $(REGION) 2>/dev/null || echo ""); \
	if [ -n "$$CLUSTER_NAME" ]; then \
		echo "Scaling up services in cluster: $$CLUSTER_NAME"; \
		aws ecs list-services --cluster "$$CLUSTER_NAME" --region $(REGION) \
			--query 'serviceArns[]' --output text | tr '\t' '\n' | while read service_arn; do \
			if [ -n "$$service_arn" ]; then \
				SERVICE_NAME=$$(basename "$$service_arn"); \
				echo "  ‚ñ∂Ô∏è  Starting service: $$SERVICE_NAME"; \
				aws ecs update-service --cluster "$$CLUSTER_NAME" \
					--service "$$SERVICE_NAME" --desired-count 1 \
					--region $(REGION) >/dev/null 2>&1 || true; \
			fi; \
		done; \
		echo "$(GREEN)‚úÖ All services started!$(NC)"; \
	else \
		echo "$(RED)‚ùå Cluster not found. Please run 'make create' first.$(NC)"; \
		exit 1; \
	fi

# Stop all services (scale to 0)
stop:
	@echo "$(YELLOW)‚è∏Ô∏è  Stopping $(SERVICE_NAME) services...$(NC)"
	@CLUSTER_NAME=$$(aws cloudformation describe-stacks \
		--stack-name $(STACK_NAME) \
		--query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
		--output text --region $(REGION) 2>/dev/null || echo ""); \
	if [ -n "$$CLUSTER_NAME" ]; then \
		echo "Scaling down services in cluster: $$CLUSTER_NAME"; \
		aws ecs list-services --cluster "$$CLUSTER_NAME" --region $(REGION) \
			--query 'serviceArns[]' --output text | tr '\t' '\n' | while read service_arn; do \
			if [ -n "$$service_arn" ]; then \
				SERVICE_NAME=$$(basename "$$service_arn"); \
				echo "  ‚èπÔ∏è  Stopping service: $$SERVICE_NAME"; \
				aws ecs update-service --cluster "$$CLUSTER_NAME" \
					--service "$$SERVICE_NAME" --desired-count 0 \
					--region $(REGION) >/dev/null 2>&1 || true; \
			fi; \
		done; \
		echo "$(YELLOW)‚úÖ All services stopped!$(NC)"; \
	else \
		echo "$(RED)‚ùå Cluster not found.$(NC)"; \
	fi

# Show infrastructure status
status:
	@echo "$(GREEN)üìä $(SERVICE_NAME) Infrastructure Status$(NC)"
	@echo "==============================="
	@echo ""
	@echo "$(YELLOW)CloudFormation Stack:$(NC)"
	@aws cloudformation describe-stacks \
		--stack-name $(STACK_NAME) \
		--query 'Stacks[0].{Status:StackStatus,Created:CreationTime,Updated:LastUpdatedTime}' \
		--output table --region $(REGION) 2>/dev/null || echo "Stack not found"
	@echo ""
	@echo "$(YELLOW)ECS Services:$(NC)"
	@CLUSTER_NAME=$$(aws cloudformation describe-stacks \
		--stack-name $(STACK_NAME) \
		--query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
		--output text --region $(REGION) 2>/dev/null || echo ""); \
	if [ -n "$$CLUSTER_NAME" ]; then \
		aws ecs list-services --cluster "$$CLUSTER_NAME" --region $(REGION) \
			--query 'serviceArns[]' --output text | tr '\t' '\n' | while read service_arn; do \
			if [ -n "$$service_arn" ]; then \
				SERVICE_NAME=$$(basename "$$service_arn"); \
				aws ecs describe-services --cluster "$$CLUSTER_NAME" \
					--services "$$SERVICE_NAME" --region $(REGION) \
					--query 'services[0].{Service:serviceName,Running:runningCount,Desired:desiredCount,Status:status}' \
					--output table; \
			fi; \
		done; \
	else \
		echo "No cluster found"; \
	fi

# Show service logs
logs:
	@echo "$(GREEN)üìã Recent service logs$(NC)"
	@echo "======================"
	@aws logs describe-log-groups \
		--log-group-name-prefix "/ecs/$(SERVICE_NAME)-$(ENVIRONMENT)" \
		--region $(REGION) \
		--query 'logGroups[*].logGroupName' --output text | tr '\t' '\n' | while read log_group; do \
		if [ -n "$$log_group" ]; then \
			echo ""; \
			echo "$(YELLOW)Log Group: $$log_group$(NC)"; \
			echo "----------------------------------------"; \
			aws logs tail "$$log_group" --region $(REGION) --since 10m --format short || true; \
		fi; \
	done

# Validate CloudFormation template
validate:
	@echo "$(GREEN)üìã Validating CloudFormation template...$(NC)"
	@aws cloudformation validate-template \
		--template-body file://$(TEMPLATE_FILE) \
		--region $(REGION)
	@echo "$(GREEN)‚úÖ Template is valid!$(NC)"

# Update existing infrastructure
update:
	@echo "$(YELLOW)üîÑ Updating $(SERVICE_NAME) infrastructure...$(NC)"
	@aws cloudformation deploy \
		--template-file $(TEMPLATE_FILE) \
		--stack-name $(STACK_NAME) \
		--parameter-overrides file://$(PARAMS_FILE) \
		--capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
		--region $(REGION) \
		--no-fail-on-empty-changeset
	@echo "$(GREEN)‚úÖ Infrastructure updated!$(NC)"

# Show stack outputs
outputs:
	@echo "$(GREEN)üìÑ Stack Outputs$(NC)"
	@echo "================"
	@aws cloudformation describe-stacks \
		--stack-name $(STACK_NAME) \
		--query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \
		--output table --region $(REGION) 2>/dev/null || echo "Stack not found"

# Show CloudFormation events
events:
	@echo "$(GREEN)üìÖ Recent CloudFormation events$(NC)"
	@echo "==================================="
	@aws cloudformation describe-stack-events \
		--stack-name $(STACK_NAME) \
		--region $(REGION) \
		--query 'StackEvents[0:10].[Timestamp,LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
		--output table 2>/dev/null || echo "Stack not found"

# Delete entire infrastructure
delete:
	@echo "$(RED)üóëÔ∏è  WARNING: This will delete ALL infrastructure for $(SERVICE_NAME)!$(NC)"
	@echo "Stack: $(STACK_NAME)"
	@echo ""
	@read -p "Are you sure you want to delete everything? [y/N] " confirm && \
		if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
			echo "$(YELLOW)Stopping services first...$(NC)"; \
			make stop; \
			echo "$(YELLOW)Waiting 30 seconds for services to stop...$(NC)"; \
			sleep 30; \
			echo "$(RED)Deleting CloudFormation stack...$(NC)"; \
			aws cloudformation delete-stack \
				--stack-name $(STACK_NAME) \
				--region $(REGION); \
			echo "$(YELLOW)Waiting for stack deletion to complete...$(NC)"; \
			aws cloudformation wait stack-delete-complete \
				--stack-name $(STACK_NAME) \
				--region $(REGION); \
			echo "$(GREEN)‚úÖ Infrastructure deleted successfully!$(NC)"; \
		else \
			echo "$(GREEN)Deletion cancelled.$(NC)"; \
		fi

# Quick deployment for development
dev-deploy:
	@echo "$(GREEN)üöÄ Quick development deployment$(NC)"
	@make create SERVICE_NAME=ecommerce ENVIRONMENT=dev
	@make start

# Production deployment with confirmation
prod-deploy:
	@echo "$(RED)‚ö†Ô∏è  PRODUCTION DEPLOYMENT$(NC)"
	@echo "=========================="
	@read -p "Deploy to PRODUCTION? [y/N] " confirm && \
		if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
			make create SERVICE_NAME=ecommerce ENVIRONMENT=prod; \
			make start; \
		else \
			echo "$(GREEN)Production deployment cancelled.$(NC)"; \
		fi

# Show help by default
.DEFAULT_GOAL := help
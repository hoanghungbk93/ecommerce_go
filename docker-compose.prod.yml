version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - ENV=production
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@host.docker.internal:5432/ecommerce?sslmode=disable
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8080
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://${SERVER_HOST}:3000,http://${SERVER_HOST}:3001
    ports:
      - "8080:8080"
    networks:
      - production-network
    labels:
      - "logging=promtail"
      - "service=ecommerce-backend"
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://${SERVER_HOST}:8080/api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://${SERVER_HOST}:8080/api
    ports:
      - "3000:3000"
    networks:
      - production-network
    labels:
      - "logging=promtail"
      - "service=ecommerce-frontend"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - production-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  production-network:
    driver: bridge
    name: ecommerce-production-network

volumes:
  redis_data:
    driver: local
